#!/usr/bin/env python
# mise description="Generate demo project"
"""
Originates from https://github.com/level12/copier-py-package

Consider updating the source file in that repo with enhancements or bug fixes needed.
"""

from os import environ
from pathlib import Path
import shutil

import click
import copier

from coppy.utils import sub_run


proj_root = Path(environ.get('MISE_PROJECT_ROOT'))


@click.command()
@click.argument('dest', type=click.Path(path_type=Path), default='/tmp/copier-py-package-demo')
@click.option('--bootstrap/--no-bootstrap', default=True)
@click.option('--nox/--no-nox', default=True)
@click.option('--update', 'is_update', is_flag=True, default=False)
def main(dest: Path, bootstrap: bool, nox: bool, is_update: bool):
    """
    Generate demo project
    """
    if is_update:
        bootstrap = False
        nox = False

    pname = 'CopierPyPackageDemo'
    dest = dest.expanduser().resolve()

    args = {
        'project_name': pname,
        'author_name': 'Picard',
        'author_email': 'jpicard@starfleet.space',
    }

    if dest.exists():
        # Remove all the contents but not the actual directory.  It makes troubleshooting the
        # demo easier b/c you don't have to keep changing out of and then back into the demo
        # directory in the shell.
        for path in dest.iterdir():
            if path.name == '.git' and is_update:
                continue

            if path.is_dir():
                shutil.rmtree(path)
            else:
                path.unlink()

    copier.run_copy(
        proj_root.as_posix(),
        dest.as_posix(),
        args,
        unsafe=True,
        defaults=True,
        vcs_ref='HEAD',
    )

    sub_run('mise', 'trust', cwd=dest, check=False)
    if bootstrap:
        sub_run('mise', 'run', 'bootstrap', cwd=dest)
        if nox:
            sub_run('mise', 'exec', '--', 'nox', cwd=dest)


if __name__ == '__main__':
    main()
